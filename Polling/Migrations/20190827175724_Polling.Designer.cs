// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Polling.Db;

namespace Polling.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190827175724_Polling")]
    partial class Polling
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Polling.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Ip")
                        .IsRequired();

                    b.Property<int?>("PollId");

                    b.Property<int?>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("Ip", "PollId")
                        .IsUnique();

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Polling.Entities.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Title")
                        .IsUnique();

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("Polling.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("PollId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.HasIndex("Title", "PollId")
                        .IsUnique();

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Polling.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessToken");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.HasIndex("AccessToken")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Polling.Entities.Answer", b =>
                {
                    b.HasOne("Polling.Entities.Poll", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId");

                    b.HasOne("Polling.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("Polling.Entities.Poll", b =>
                {
                    b.HasOne("Polling.Entities.User", "User")
                        .WithMany("Polls")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Polling.Entities.Question", b =>
                {
                    b.HasOne("Polling.Entities.Poll", "Poll")
                        .WithMany("Questions")
                        .HasForeignKey("PollId");
                });
#pragma warning restore 612, 618
        }
    }
}
